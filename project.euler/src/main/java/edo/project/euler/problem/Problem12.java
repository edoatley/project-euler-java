package edo.project.euler.problem;

import java.util.*;

/**
 * Problem 12 - Highly divisible triangular number
 * ======================================
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 * The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * @author Edd
 *
 */
public class Problem12 {
	
	private Map<Integer, Integer> factorisationsSoFar = new TreeMap<>();
	private List<Integer> factorisationsSoFarKeys = new ArrayList<>();

	public int solve() {
		int i = 1;
		while(true) {
			int triangle = (i * (i+1)) / 2;
			int factors = countFactorsElegant(triangle);
			if(factors >= 500) {
				return triangle;
			}
			else if (i%500 == 0) {
			    System.err.println(triangle + " has " + factors + " factors");
			}
			i++;
		}
	}

	private int countFactorsElegant(int num) {
		int lim = (int) Math.sqrt(num) + 1;
		Set<Integer> fact = new HashSet(500);
		
		for (int n = 1; n < lim; n++) {
			if((num % n) == 0) {
				fact.add(n);
				fact.add(num / n);
			}
		}

		return fact.size();
	}

	public static void main(String[] args) {
		Problem12 problem = new Problem12();
		System.err.println("Result is " + problem.solve());
	}
}
