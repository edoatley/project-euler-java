package edo.project.euler.problem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/**
 * Problem 12 - Highly divisible triangular number
 * ======================================
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 * The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 * @author Edd
 *
 */
public class Problem12 {
//	
//	// need to make use of the factorisations performed so far!!
//	public int elegantSolve() {
//		/*
//		 * As an example 21 has the factors 1, 3, 7
//		 * Can we use this to help solve the factors of 155?
//		 * we can say as 155 / 21  = 5 it follows that 
//		 * 1, 3, 5, 7 & 21 are factors of 155
//		 * 
//		 *  Could there be a factor between 21/2 and 21 - 1 of 21n? 
//		 *  Lets prove not and lets solve that for nY there is a factor X that is greater than Y/2 and less than Y:
//		 *  
//		 *  x > Y/2          10
//		 *  x < Y            21
//		 *  nY % x = 0       so a number between 11 and 20 divides exactly 
//		 *  n * 21 = 11 * x
//		 */
//	}
	
	private Map<Integer, Integer> factorisationsSoFar = new TreeMap<Integer, Integer>();
	private List<Integer> factorisationsSoFarKeys = new ArrayList<Integer>();
	
	public int solve() {
		
		int triangle = 0;
		for (int i = 1; i < Integer.MAX_VALUE; i++) {
			triangle += i;
			int factors = countFactorsElegant(triangle);
			if (triangle % 276 == 0) {				
				System.err.println(triangle + " has " + factors + " factors");
			}
			if(factors == 500) {
				return triangle;
			}
		}
		return -1;
	}

//	private int countFactors(int num) {
//		int factors = 1; // set to 1 as divisible by itself at least
//		
//		int lim = (num + 1) / 2;
//		
//		for (int n = 1; n < lim; n++) {
//			if((num % n) == 0) {
//				factors++;
//			}
//		}
//		return factors;
//	}
	private int countFactorsElegant(int num) {
		int factors = 1; // set to 1 as divisible by itself at least
		
		int lim = (num + 1) / 2;
		int start = 1;
		
		if(factorisationsSoFarKeys.size() > 0) {
			for (int i = factorisationsSoFarKeys.size() - 1; i >= 0; i--) {
				if(num % factorisationsSoFarKeys.get(i) == 0) {
					start = factorisationsSoFarKeys.get(i) + 1;
					break;
				}
			}
		}
		
		for (int n = start; n < lim; n++) {
			if((num % n) == 0) {
				factors++;
			}
		}
		
		factorisationsSoFar.put(num, factors);
		factorisationsSoFarKeys.add(num);
		return factors;
	}
}
